// 真实邮件发送测试
// 要运行此测试，请设置环境变量：
// RUN_REAL_EMAIL_TESTS=true
// TEST_EMAIL=your-email@example.com
// RESEND_API_KEY=your-api-key

import { getMailProvider } from '../providers';
import { sendEmail } from '../index';
import { testMessages } from '../../test/test-env';

const shouldRunRealTests = process.env.RUN_REAL_EMAIL_TESTS === 'true';
const testEmail = process.env.TEST_EMAIL;
const hasApiKey = process.env.RESEND_API_KEY && process.env.RESEND_API_KEY !== 'test-api-key';

const skipIfNoRealTests = shouldRunRealTests && testEmail && hasApiKey ? describe : describe.skip;

skipIfNoRealTests('Real Email Sending Tests', () => {
	let mailProvider: any;

	beforeAll(async () => {
		try {
			mailProvider = await getMailProvider();
		} catch (error) {
			console.error('Failed to initialize mail provider:', error);
			throw error;
		}
	});

	describe('邮件提供商真实测试', () => {
		it('应该能够发送基本邮件', async () => {
			await expect(
				mailProvider.sendEmail({
					to: testEmail!,
					subject: '🧪 邮件提供商测试 - 基本邮件',
					text: '这是一封测试邮件的纯文本内容。如果您收到此邮件，说明邮件发送功能正常工作。',
					html: `
						<h1>🧪 邮件提供商测试</h1>
						<p>这是一封测试邮件的HTML内容。</p>
						<p>如果您收到此邮件，说明邮件发送功能正常工作。</p>
						<p><small>发送时间: ${new Date().toISOString()}</small></p>
					`,
				})
			).resolves.not.toThrow();

			console.log(`✅ 基本邮件已发送到: ${testEmail}`);
		}, 30000);

		it('应该能够发送纯文本邮件', async () => {
			await expect(
				mailProvider.sendEmail({
					to: testEmail!,
					subject: '🧪 邮件提供商测试 - 纯文本邮件',
					text: `这是一封纯文本测试邮件。

发送时间: ${new Date().toISOString()}

如果您收到此邮件，说明纯文本邮件发送功能正常工作。`,
				})
			).resolves.not.toThrow();

			console.log(`✅ 纯文本邮件已发送到: ${testEmail}`);
		}, 30000);
	});

	describe('sendEmail 函数真实测试', () => {
		it('应该能够发送邮箱验证邮件', async () => {
			const result = await sendEmail({
				to: testEmail!,
				templateKey: 'emailVerification',
				context: {
					name: '测试用户',
					url: 'https://example.com/verify?token=test123',
				},
				locale: 'zh',
				messages: testMessages,
			});

			expect(result).toBe(true);
			console.log(`✅ 邮箱验证邮件已发送到: ${testEmail}`);
		}, 30000);

		it('应该能够发送魔法链接邮件', async () => {
			const result = await sendEmail({
				to: testEmail!,
				templateKey: 'magicLink',
				context: {
					url: 'https://example.com/auth/magic?token=magic123',
				},
				locale: 'zh',
				messages: testMessages,
			});

			expect(result).toBe(true);
			console.log(`✅ 魔法链接邮件已发送到: ${testEmail}`);
		}, 30000);

		it('应该能够发送忘记密码邮件', async () => {
			const result = await sendEmail({
				to: testEmail!,
				templateKey: 'forgotPassword',
				context: {
					name: '测试用户',
					url: 'https://example.com/reset?token=reset123',
				},
				locale: 'zh',
				messages: testMessages,
			});

			expect(result).toBe(true);
			console.log(`✅ 忘记密码邮件已发送到: ${testEmail}`);
		}, 30000);

		it('应该能够发送联系表单邮件', async () => {
			const result = await sendEmail({
				to: testEmail!,
				templateKey: 'contactForm',
				context: {
					name: '测试用户',
					email: 'testuser@example.com',
					message: `这是一条测试消息，用于验证联系表单邮件功能。

发送时间: ${new Date().toISOString()}

如果收到此邮件，说明联系表单邮件功能正常工作。`,
				},
				locale: 'zh',
				messages: testMessages,
			});

			expect(result).toBe(true);
			console.log(`✅ 联系表单邮件已发送到: ${testEmail}`);
		}, 30000);

		it('应该能够发送自定义内容邮件', async () => {
			const result = await sendEmail({
				to: testEmail!,
				subject: '🧪 自定义内容测试邮件',
				text: `这是一封自定义内容的测试邮件。

发送时间: ${new Date().toISOString()}`,
				html: `
					<h1>🧪 自定义内容测试邮件</h1>
					<p>这是一封自定义内容的测试邮件。</p>
					<ul>
						<li>支持HTML格式</li>
						<li>支持纯文本格式</li>
						<li>支持自定义主题</li>
					</ul>
					<p><small>发送时间: ${new Date().toISOString()}</small></p>
				`,
				locale: 'zh',
				messages: testMessages,
			});

			expect(result).toBe(true);
			console.log(`✅ 自定义内容邮件已发送到: ${testEmail}`);
		}, 30000);
	});

	describe('错误处理测试', () => {
		it('应该正确处理无效邮箱地址', async () => {
			const result = await sendEmail({
				to: 'clearly-invalid-email-address',
				subject: '测试邮件',
				text: '测试内容',
				locale: 'zh',
				messages: testMessages,
			});

			expect(result).toBe(false);
			console.log('✅ 正确处理了无效邮箱地址');
		});
	});

	afterAll(() => {
		console.log(`
🎉 真实邮件发送测试完成！

请检查邮箱 ${testEmail} 是否收到了以下测试邮件：
1. 邮件提供商测试 - 基本邮件
2. 邮件提供商测试 - 纯文本邮件
3. 邮箱验证邮件
4. 魔法链接邮件
5. 忘记密码邮件
6. 联系表单邮件
7. 自定义内容测试邮件

所有邮件都应该正确显示，包含相应的内容和样式。
		`);
	});
});

// 当未启用真实测试时显示提示
if (!shouldRunRealTests) {
	console.log(`
📧 要运行真实邮件发送测试，请设置以下环境变量：

export RUN_REAL_EMAIL_TESTS=true
export TEST_EMAIL=your-email@example.com
export RESEND_API_KEY=your-resend-api-key

然后运行:
pnpm test -- --testPathPatterns="real-email"

注意：
1. 确保使用真实有效的邮箱地址
2. 确保有有效的Resend API密钥
3. 测试将发送真实邮件到指定邮箱
	`);
}